clear

TEST='\033[0;34m'
FAILED='\033[0;31m'
SUCCESS='\033[0;32m'
NORMAL='\033[0m'

# ./mtlverify -b SPHINCS+-MTL-SHA2-128S-SIMPLE "$(cat verifier.key)" "$(cat verifier.msg)" "$(cat verifier.sig)"

KEY=CffuKNpxUJip33JzH3AjmiRT7T2fhAOqZnafYJ+8aDE=
MESSAGE=CCk2LALi6RnsRdmGSysQcw==
SIG_FULL=
#SIG_COND=427b76170705f6ed2bfb3f35fc48311300009524b6a7d7a0659000000005000000040000000500016dd3ef1d61149b2ab7178a5abce4cdfe
SIG_COND=Qnt2FwcF9u0r+z81/EgxEwAAlSS2p9egZZAAAAAFAAAABAAAAAUAAW3T7x1hFJsqtxeKWrzkzf4=
LADDER=AACVJLan16BlkAACAAAAAAAAAAPCyYYLwfHHQva4jpFSnI+6AAAABAAAAAXeQmfcyItzci6DqNzr6N/q
LADDER_SIGN=

FLAGS=

echo " -------------------- Test with Base 64 Inputs -------------------- "
echo ""
echo -e " ${TEST}###### Test 1: Verify a full signature is successful (BASE64)${NORMAL}"
./mtlverify $FLAGS -b SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY $MESSAGE $SIG_FULL
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (as expected)${NORMAL}"
else
    echo -e "${FAILED}    mtlverify - Failed (unexpected result)${NORMAL}"
    exit 1
fi

echo ""
echo -e " ${TEST}###### Test 2: Verify a full signature is successful with a cached ladder (BASE64)${NORMAL}"
./mtlverify $FLAGS -b SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY $MESSAGE $SIG_FULL $LADDER
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (as expected)${NORMAL}"
else
    echo -e "${FAILED}    mtlverify - Failed (unexpected result)${NORMAL}"
    exit 1
fi

echo ""
echo -e " ${TEST}###### Test 3: Verify a condensed signature is successful with a cached ladder (BASE64)${NORMAL}"
./mtlverify $FLAGS -b SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY $MESSAGE $SIG_COND $LADDER
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (as expected)${NORMAL}"
else
    echo -e "${FAILED}    mtlverify - Failed (unexpected result)${NORMAL}"
    exit 1
fi

echo ""
echo -e " ${TEST}###### Test 4: Verify a condensed signature is successful with a signed ladder (BASE64)${NORMAL}"
./mtlverify $FLAGS -b SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY $MESSAGE $SIG_COND $LADDER_SIGN
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (as expected)${NORMAL}"
else
    echo -e "${FAILED}    mtlverify - Failed (unexpected result)${NORMAL}"
    exit 1
fi

echo ""
echo -e " ${TEST}###### Test 5: Verify a condensed signature fails without a ladder (BASE64)${NORMAL}"
./mtlverify $FLAGS -b SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY $MESSAGE $SIG_COND
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (unexpected result)${NORMAL}"
    exit 1
else
    echo -e "${FAILED}    mtlverify - Failed (as expected)${NORMAL}"
fi


echo ""
echo -e " ${TEST}###### Test 6: Verify a full signature fails with the wrong algorithm (BASE64)${NORMAL}"
./mtlverify $FLAGS -b SPHINCS+-MTL-SHAKE-128S-SIMPLE $KEY $MESSAGE $SIG_FULL
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (unexpected result)${NORMAL}"
    exit 1
else
    echo -e "${FAILED}    mtlverify - Failed (as expected)${NORMAL}"
fi


KEY_HEX=$(echo $KEY | base64 -d | od -t x1 -An | tr -d '\n ')
MESSAGE_HEX=$(echo $MESSAGE | base64 -d | od -t x1 -An | tr -d '\n ')
SIG_FULL_HEX=$(echo $SIG_FULL | base64 -d | od -t x1 -An | tr -d '\n ')
SIG_COND_HEX=$(echo $SIG_COND | base64 -d | od -t x1 -An | tr -d '\n ')
LADDER_HEX=$(echo $LADDER | base64 -d | od -t x1 -An | tr -d '\n ')
LADDER_SIGN_HEX=$(echo $LADDER_SIGN | base64 -d | od -t x1 -An | tr -d '\n ')

echo ""
echo " -------------------- Test with Hex Inputs -------------------- "
echo ""
echo -e " ${TEST}###### Test 7: Verify a full signature is successful (HEX)${NORMAL}"
./mtlverify $FLAGS SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY_HEX $MESSAGE_HEX $SIG_FULL_HEX
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (as expected)${NORMAL}"
else
    echo -e "${FAILED}    mtlverify - Failed (unexpected result)${NORMAL}"
    exit 1
fi

echo ""
echo -e " ${TEST}###### Test 8: Verify a full signature is successful with a cached ladder (HEX)${NORMAL}"
./mtlverify $FLAGS SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY_HEX $MESSAGE_HEX $SIG_FULL_HEX $LADDER_HEX
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (as expected)${NORMAL}"
else
    echo -e "${FAILED}    mtlverify - Failed (unexpected result)${NORMAL}"
    exit 1
fi


echo ""
echo -e " ${TEST}###### Test 9: Verify a condensed signature is successful with a cached ladder (HEX)${NORMAL}"
./mtlverify $FLAGS SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY_HEX $MESSAGE_HEX $SIG_COND_HEX $LADDER_HEX
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (as expected)${NORMAL}"
else
    echo -e "${FAILED}    mtlverify - Failed (unexpected result)${NORMAL}"
    exit 1
fi

echo ""
echo -e " ${TEST}###### Test 10: Verify a condensed signature is successful with a signed ladder (BASE64)${NORMAL}"
./mtlverify $FLAGS SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY_HEX $MESSAGE_HEX $SIG_COND_HEX $LADDER_SIGN_HEX
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (as expected)${NORMAL}"
else
    echo -e "${FAILED}    mtlverify - Failed (unexpected result)${NORMAL}"
    exit 1
fi

echo ""
echo -e " ${TEST}###### Test 11: Verify a condensed signature fails without a ladder (HEX)${NORMAL}"
./mtlverify $FLAGS SPHINCS+-MTL-SHA2-128S-SIMPLE $KEY_HEX $MESSAGE_HEX $SIG_COND_HEX
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (unexpected result)${NORMAL}"
    exit 1
else
    echo -e "${FAILED}    mtlverify - Failed (as expected)${NORMAL}"
fi


echo ""
echo -e " ${TEST}###### Test 12: Verify a full signature fails with the wrong algorithm (HEX)${NORMAL}"
./mtlverify $FLAGS SPHINCS+-MTL-SHAKE-128S-SIMPLE $KEY_HEX $MESSAGE_HEX $SIG_FULL_HEX
if [[ $? -eq 0 ]]; then
    echo -e "${SUCCESS}    mtlverify - Success (unexpected result)${NORMAL}"
    exit 1
else
    echo -e "${FAILED}    mtlverify - Failed (as expected)${NORMAL}"
fi